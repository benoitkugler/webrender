package svg

import (
	"fmt"
	"reflect"
	"testing"
)

func moveToF(x, y Fl) pathItem {
	return pathItem{op: moveTo, args: [3]point{{x, y}}}
}

func lineToF(x, y Fl) pathItem {
	return pathItem{op: lineTo, args: [3]point{{x, y}}}
}

func cubicToF(x1, y1, x2, y2, x3, y3 Fl) pathItem {
	return pathItem{op: cubicTo, args: [3]point{
		{x1, y1}, {x2, y2}, {x3, y3},
	}}
}

func Test_parsePath(t *testing.T) {
	tests := []struct {
		args    string
		want    []pathItem
		wantErr bool
	}{
		{
			args: "M200,300 L400,50 L600,300 L800,550 L1000,300",
			want: []pathItem{
				moveToF(200, 300),
				lineToF(400, 50),
				lineToF(600, 300),
				lineToF(800, 550),
				lineToF(1000, 300),
			},
		},
		{
			args: "M100,200 C100,100 250,100 250,200",
			want: []pathItem{
				moveToF(100, 200),
				cubicToF(100, 100, 250, 100, 250, 200),
			},
		},
		{
			args:    "M100, ",
			wantErr: true,
		},
	}
	var c pathParser
	for _, tt := range tests {
		got, err := c.parsePath(tt.args)
		if (err != nil) != tt.wantErr {
			t.Errorf("parsePath() error = %v, wantErr %v", err, tt.wantErr)
			return
		}
		if !reflect.DeepEqual(got, tt.want) {
			t.Errorf("parsePath() = %v, want %v", got, tt.want)
		}
	}
}

func TestParsePathCrash(t *testing.T) {
	paths := []string{
		"M10 80h80a5 5 0 000-10H10a5 5 0 000 10zm0-25h80a5 5 0 000-10H10a5 5 0 000 10zM5 25a5 5 0 005 5h80a5 5 0 000-10H10a5 5 0 00-5 5z",
		"M69.37 54.11v25.83a2.61 2.61 0 01-2.6 2.6H20a2.61 2.61 0 01-2.6-2.6v-46.8a2.61 2.61 0 012.6-2.6h31.49V24H14.12a3.26 3.26 0 00-3.25 3.25v58.5A3.26 3.26 0 0014.12 89h58.5a3.26 3.26 0 003.25-3.25V54.11z",
		"M50.75 54.85l30.62-30.62V51a3.91 3.91 0 003.9 3.89A3.86 3.86 0 0089.13 51V14.88A3.86 3.86 0 0085.27 11H49.13a3.87 3.87 0 100 7.73h26.76L45.26 49.37a3.88 3.88 0 105.49 5.48z",
		"M300,200 h-150 a150,150 0 1,0 150,-150 z",
		"M275,175 v-150 a150,150 0 0,0 -150,150 z",
		`M600,350 l 50,-25 
			a25,25 -30 0,1 50,-25 l 50,-25 
			a25,50 -30 0,1 50,-25 l 50,-25 
			a25,75 -30 0,1 50,-25 l 50,-25 
			a25,100 -30 0,1 50,-25 l 50,-25`,
		"M200,300 Q400,50 600,300 T1000,300",
		"M100,200 C100,100 250,100 250,200 S400,300 400,200",
		"m16.2 24.1c-.4 0-.5-.2-.3-.5l2.1-2.7c.2-.3.7-.5 1.1-.5h35.7c.4 0 .5.3.3.6l-1.7 2.6c-.2.3-.7.6-1 .6z",
		"m1.1 33.3c-.4 0-.5-.2-.3-.5l2.1-2.7c.2-.3.7-.5 1.1-.5h45.6c.4 0 .6.3.5.6l-.8 2.4c-.1.4-.5.6-.9.6z",
		"m25.3 42.5c-.4 0-.5-.3-.3-.6l1.4-2.5c.2-.3.6-.6 1-.6h20c.4 0 .6.3.6.7l-.2 2.4c0 .4-.4.7-.7.7z",
		"m74.1 22.3c-6.3 1.6-10.6 2.8-16.8 4.4-1.5.4-1.6.5-2.9-1-1.5-1.7-2.6-2.8-4.7-3.8-6.3-3.1-12.4-2.2-18.1 1.5-6.8 4.4-10.3 10.9-10.2 19 .1 8 5.6 14.6 13.5 15.7 6.8.9 12.5-1.5 17-6.6.9-1.1 1.7-2.3 2.7-3.7-3.6 0-8.1 0-19.3 0-2.1 0-2.6-1.3-1.9-3 1.3-3.1 3.7-8.3 5.1-10.9.3-.6 1-1.6 2.5-1.6h36.4c-.2 2.7-.2 5.4-.6 8.1-1.1 7.2-3.8 13.8-8.2 19.6-7.2 9.5-16.6 15.4-28.5 17-9.8 1.3-18.9-.6-26.9-6.6-7.4-5.6-11.6-13-12.7-22.2-1.3-10.9 1.9-20.7 8.5-29.3 7.1-9.3 16.5-15.2 28-17.3 9.4-1.7 18.4-.6 26.5 4.9 5.3 3.5 9.1 8.3 11.6 14.1.6.9.2 1.4-1 1.7z",
		"m107.2 77.6c-9.1-.2-17.4-2.8-24.4-8.8-5.9-5.1-9.6-11.6-10.8-19.3-1.8-11.3 1.3-21.3 8.1-30.2 7.3-9.6 16.1-14.6 28-16.7 10.2-1.8 19.8-.8 28.5 5.1 7.9 5.4 12.8 12.7 14.1 22.3 1.7 13.5-2.2 24.5-11.5 33.9-6.6 6.7-14.7 10.9-24 12.8-2.7.5-5.4.6-8 .9zm23.8-40.4c-.1-1.3-.1-2.3-.3-3.3-1.8-9.9-10.9-15.5-20.4-13.3-9.3 2.1-15.3 8-17.5 17.4-1.8 7.8 2 15.7 9.2 18.9 5.5 2.4 11 2.1 16.3-.6 7.9-4.1 12.2-10.5 12.7-19.1z",
		`M7.14 8.35v111.06h111.05V8.35zm103.71 56c-.48.92-1 1.79-1.46 2.71a3.44 3.44 0 01-3.54 2 2.4 2.4 0 00-1.55.5c-1.37.9-2.76 1.79-4.18 2.63a7.33 7.33 0 01-6.35.34 29.71 29.71 0 00-10.63-2 11.7 11.7 0 00-9.46 4.31 14.84 14.84 0 00-2.13 4.29c-1.24 3.07-2.3 21.38-2.3 26.05 0 0-17.62-3.42-34.15-20.34l4.31-11.32h-13.5l9.76-10.35h-16.8l9.77-10.34H12.69L30.45 34a40.9 40.9 0 0119.77-10.83c7.1-1.22 8.93-.53 13.31.77l2.43.73.85.25 3.1.95a12.56 12.56 0 006.21.09 11.37 11.37 0 018.25 1 8.24 8.24 0 014.1 6.22 7.29 7.29 0 003.61 5.49 59.45 59.45 0 009.32 4.11c2.27.86 4.54 1.84 6.79 2.72a6.81 6.81 0 012.86 2.06 4.81 4.81 0 011.1 2.73c.14 2 .37 4 .47 6a15.24 15.24 0 01-1.77 8.03zM320.12 39.62a5.42 5.42 0 00-4.53 2.13 7.36 7.36 0 00-1.7 4.43v2.36a6.28 6.28 0 001.7 4.46 5.63 5.63 0 004.3 1.82 5.12 5.12 0 004.57-2.27A9.7 9.7 0 00326 47a8.11 8.11 0 00-1.67-5.52 5.36 5.36 0 00-4.21-1.86zM387.38 39.53a5.52 5.52 0 00-4.7 2.15 8.8 8.8 0 00-1.63 5.49 9.23 9.23 0 001.58 5.45 5.38 5.38 0 004.7 2.25 5.61 5.61 0 004.74-2.2 8.91 8.91 0 001.68
		-5.59 8.24 8.24 0 00-1.75-5.52 5.76 5.76 0 00-4.62-2.03zM299.47 41.35a4.34 4.34 0 00-4-1.92 4.55 4.55 0 00-3.89 1.73 8.37 8.37 0 00-1.58 4.17h10.48a6.3 6.3 0 00-1.01-3.98zM357.74 30.75H352v23.31h5.72q5.47 0 8.35-3t2.93-8.65q0-5.43-2.88-8.55t-8.38-3.11z`,
	}
	var c pathParser
	for _, path := range paths {
		_, err := c.parsePath(path)
		if err != nil {
			t.Fatalf("path %s: %s", path, err)
		}
	}
}

func TestPathToOp(t *testing.T) {
	path := `M4500 12794 c-357 -33 -696 -154 -995 -352 -384 -256 -595 -558 -686
-982 -20 -90 -23 -136 -23 -325 -1 -234 7 -303 60 -509 49 -192 167 -471 288
-683 l35 -61 -87 -37 c-477 -205 -864 -510 -1094 -865 -144 -222 -239 -471
-290 -768 -20 -111 -23 -163 -22 -402 0 -239 3 -292 22 -405 88 -509 312 -946
629 -1227 134 -119 361 -251 521 -302 28 -10 52 -19 52 -21 0 -2 -87 -48 -192
-102 -823 -423 -1477 -975 -1895 -1598 -401 -598 -657 -1322 -763 -2155 -49
-390 -54 -503 -54 -1150 -1 -338 3 -668 8 -733 l8 -117 4648 0 4648 0 8 118
c14 196 11 1295 -4 1492 -50 677 -166 1264 -334 1690 -212 537 -514 988 -962
1436 -398 398 -850 726 -1418 1031 -123 67 -156 89 -142 94 207 78 277 120
473 283 150 124 223 199 326 337 175 234 287 495 349 809 65 330 59 761 -14
1040 -72 277 -219 601 -354 781 -224 298 -565 548 -998 734 l-87 37 30 52
c234 399 352 838 336 1246 -13 310 -91 552 -264 815 -182 276 -398 472 -668
605 -273 135 -505 188 -855 194 -107 2 -215 2 -240 0z`
	var c pathParser
	out, err := c.parsePath(path)
	if err != nil {
		t.Fatal(err)
	}
	for _, item := range out {
		switch item.op {
		case moveTo:
			fmt.Printf("..moveTo(%g, %g)\n", item.args[0].x/10, item.args[0].y/10)
		case lineTo:
			fmt.Printf("..lineTo(%g, %g)\n", item.args[0].x/10, item.args[0].y/10)
		case cubicTo:
			fmt.Printf("..cubicTo(%g, %g, %g, %g, %g, %g)\n",
				item.args[0].x/10, item.args[0].y/10,
				item.args[1].x/10, item.args[1].y/10,
				item.args[2].x/10, item.args[2].y/10,
			)
		case close:
			fmt.Println("..close()")
		}
	}
}
